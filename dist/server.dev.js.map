{"version":3,"sources":["server.js"],"names":["express","require","bodyParser","app","use","json","set","mockUserData","name","get","req","res","sucess","message","users","console","log","params","id","success","user","post","username","body","password","mockUsername","mockPassword","token","render","title","content","listen"],"mappings":";;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB,C,CAAoC;;;AACpC,IAAMC,UAAU,GAAGD,OAAO,CAAC,aAAD,CAA1B;;AACA,IAAME,GAAG,GAAGH,OAAO,EAAnB,C,CAAuB;;AACvBG,GAAG,CAACC,GAAJ,CAAQF,UAAU,CAACG,IAAX,EAAR;AACAF,GAAG,CAACG,GAAJ,CAAQ,aAAR,EAAuB,KAAvB,E,CAEA;;AACA,IAAMC,YAAY,GAAG,CACb;AAAEC,EAAAA,IAAI,EAAE;AAAR,CADa,EAEb;AAAEA,EAAAA,IAAI,EAAE;AAAR,CAFa,CAArB,C,CAKA;;AACAL,GAAG,CAACM,GAAJ,CAAQ,QAAR,EAAkB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACxBA,EAAAA,GAAG,CAACN,IAAJ,CAAS;AACDO,IAAAA,MAAM,EAAE,IADP;AAEDC,IAAAA,OAAO,EAAE,+BAFR;AAGDC,IAAAA,KAAK,EAAEP;AAHN,GAAT;AAKP,CAND;AAQA;;;;;AAIAJ,GAAG,CAACM,GAAJ,CAAQ,YAAR,EAAsB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC5BI,EAAAA,OAAO,CAACC,GAAR,CAAYN,GAAG,CAACO,MAAJ,CAAWC,EAAvB;AACAP,EAAAA,GAAG,CAACN,IAAJ,CAAS;AACDc,IAAAA,OAAO,EAAE,IADR;AAEDN,IAAAA,OAAO,EAAE,cAFR;AAGDO,IAAAA,IAAI,EAAEV,GAAG,CAACO,MAAJ,CAAWC;AAHhB,GAAT;AAKP,CAPD;AASA;;;;;AAIAf,GAAG,CAACkB,IAAJ,CAAS,QAAT,EAAmB,UAACX,GAAD,EAAMC,GAAN,EAAc;AACzB;AACA,MAAMW,QAAQ,GAAGZ,GAAG,CAACa,IAAJ,CAASD,QAA1B;AACA,MAAME,QAAQ,GAAGd,GAAG,CAACa,IAAJ,CAASC,QAA1B,CAHyB,CAKzB;;AACA,MAAMC,YAAY,GAAG,aAArB;AACA,MAAMC,YAAY,GAAG,aAArB;;AAEA,MAAIJ,QAAQ,KAAKG,YAAb,IAA6BD,QAAQ,KAAKE,YAA9C,EAA4D;AACpD;AACAf,IAAAA,GAAG,CAACN,IAAJ,CAAS;AACDO,MAAAA,MAAM,EAAE,IADP;AAEDC,MAAAA,OAAO,EAAE,8BAFR;AAGDc,MAAAA,KAAK,EAAE;AAHN,KAAT;AAKP,GAPD,MAOO;AACChB,IAAAA,GAAG,CAACN,IAAJ,CAAS;AACDO,MAAAA,MAAM,EAAE,KADP;AAEDC,MAAAA,OAAO,EAAE;AAFR,KAAT;AAIP;AACR,CAtBD,E,CAwBA;;AACAV,GAAG,CAACM,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAc;AACnBA,EAAAA,GAAG,CAACiB,MAAJ,CAAW,OAAX,EAAoB;AAACC,IAAAA,KAAK,EAAE,WAAR;AAAqBC,IAAAA,OAAO,EAAE;AAA9B,GAApB;AACP,CAFD;AAIA;;;;;AAIA3B,GAAG,CAAC4B,MAAJ,CAAW,IAAX,EAAiB;AAAA,SAAMhB,OAAO,CAACC,GAAR,CAAY,mBAAZ,CAAN;AAAA,CAAjB,E,CAAyD","sourcesContent":["const express = require('express'); // access express library in node_modules\r\nconst bodyParser = require('body-parser');\r\nconst app = express(); // express constructor\r\napp.use(bodyParser.json());\r\napp.set('view engine', 'pug')\r\n\r\n// Creating object to contain user data\r\nconst mockUserData = [\r\n        { name: 'Mark' },\r\n        { name: 'Jill' }\r\n]\r\n\r\n// Adding first GET route to system\r\napp.get('/users', (req, res) => {\r\n        res.json({\r\n                sucess: true,\r\n                message: \"successfully got users. Nice!\",\r\n                users: mockUserData\r\n        })\r\n})\r\n\r\n/**\r\n   * Here, ':id is treated as a variable' \r\n   * You can use dynamic variables to search for specific data associated with an id in your database, and return that (instead of just returning the id)\r\n */\r\napp.get('/users/:id', (req, res) => {\r\n        console.log(req.params.id)\r\n        res.json({\r\n                success: true,\r\n                message: \"got one user\",\r\n                user: req.params.id\r\n        })\r\n})\r\n\r\n/**\r\n * Handling POST request to 'login' endpoint \r\n * As a security precaution, you should never save passwords directly into your database. Use a tool like bcrypt to save a hashed version, which will be decoded at login. \r\n */\r\napp.post('/login', (req, res) => {\r\n        // Typically passwords are encrypted using something like bcrypt before sending to database\r\n        const username = req.body.username;\r\n        const password = req.body.password;\r\n\r\n        // This should come from db\r\n        const mockUsername = \"billyTheKid\"\r\n        const mockPassword = \"superSecret\"\r\n\r\n        if (username === mockUsername && password === mockPassword) {\r\n                // In practice, use JSON web token sign method here to make an encrypted token\r\n                res.json({\r\n                        sucess: true,\r\n                        message: 'password and username match!',\r\n                        token: 'encrypted token goes here'\r\n                })\r\n        } else {\r\n                res.json({\r\n                        sucess: false,\r\n                        message: 'password and username do not match'\r\n                })\r\n        }\r\n})\r\n\r\n// Using PUG template\r\napp.get('/', (req, res) => {\r\n        res.render('index', {title: \"Home Page\", content: \"This is a content in Home Page!\"})\r\n})\r\n\r\n/**\r\n * ----- Server ------\r\n * You can reset the server automatically when you make changes using a tool called nodemon\r\n */\r\napp.listen(8000, () => console.log(\"server is running\")) // start server in port 8000"],"file":"server.dev.js"}