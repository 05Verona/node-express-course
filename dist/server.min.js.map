{"version":3,"sources":["server.js"],"names":["express","require","bodyParser","app","use","json","set","name","req","res","sucess","message","users","mockUserData","get","console","log","params","id","success","user","post","username","body","password","mockPassword","mockUsername","token","render","title","content","listen"],"mappings":"aAAA,IAAMA,QAAUC,QAAQ,WAClBC,WAAaD,QAAQ,eADrBD,IAAOA,UAGbG,IAAIC,IAAIF,WAAWG,QACnBF,IAAIG,IAAI,cAAe,OAFvB,IAAMH,aAAiB,CAMf,CAAEI,KAAM,QALRL,CAAAA,KAAAA,SAKEK,IAAAA,IAAM,SAAA,SAAAC,EAAAC,GACRA,EAAAJ,KAAA,CAAQK,QAAA,EAGhBC,QAAA,gCAKgBC,MAAOC,iBAIvBV,IAAAW,IAAA,aAAA,SAAAN,EAAAC,GAKQM,QAAQC,IAAIR,EAAIS,OAAOC,IACvBT,EAAIJ,KAAK,CACDc,SAAS,EACTR,QAAS,eAJjBS,KAAcZ,EAAAS,OAACT,OASvBL,IAAAkB,KAAA,SAAA,SAAAb,EAAAC,GAMQ,IAAMa,EAAWd,EAAIe,KAAKD,SACpBE,EAAWhB,EAAIe,KAAKC,SAF1B,gBAQIF,GAPsBA,gBAOOE,EAF3BC,EAAYpB,KAAG,CAKLK,QAAQ,EAHPgB,QAAb,+BACIC,MAAA,8BAGiBlB,EAAAJ,KAAA,CACFK,QAAA,EAHfC,QAAA,yCAUPR,IAAAW,IAAA,IAAA,SAAAN,EAAAC,GAGTA,EAAAmB,OAAA,QAAA,CAAAC,MAAA,YAAAC,QAAA,sCAGC3B,IAFD4B,OAAA,IAAA,WAAA,OAAAhB,QAAAC,IAAA","file":"server.min.js","sourcesContent":["const express = require('express'); // access express library in node_modules\r\nconst bodyParser = require('body-parser');\r\nconst app = express(); // express constructor\r\napp.use(bodyParser.json());\r\napp.set('view engine', 'pug')\r\n\r\n// Creating object to contain user data\r\nconst mockUserData = [\r\n        { name: 'Mark' },\r\n        { name: 'Jill' }\r\n]\r\n\r\n// Adding first GET route to system\r\napp.get('/users', (req, res) => {\r\n        res.json({\r\n                sucess: true,\r\n                message: \"successfully got users. Nice!\",\r\n                users: mockUserData\r\n        })\r\n})\r\n\r\n/**\r\n   * Here, ':id is treated as a variable' \r\n   * You can use dynamic variables to search for specific data associated with an id in your database, and return that (instead of just returning the id)\r\n */\r\napp.get('/users/:id', (req, res) => {\r\n        console.log(req.params.id)\r\n        res.json({\r\n                success: true,\r\n                message: \"got one user\",\r\n                user: req.params.id\r\n        })\r\n})\r\n\r\n/**\r\n * Handling POST request to 'login' endpoint \r\n * As a security precaution, you should never save passwords directly into your database. Use a tool like bcrypt to save a hashed version, which will be decoded at login. \r\n */\r\napp.post('/login', (req, res) => {\r\n        // Typically passwords are encrypted using something like bcrypt before sending to database\r\n        const username = req.body.username;\r\n        const password = req.body.password;\r\n\r\n        // This should come from db\r\n        const mockUsername = \"billyTheKid\"\r\n        const mockPassword = \"superSecret\"\r\n\r\n        if (username === mockUsername && password === mockPassword) {\r\n                // In practice, use JSON web token sign method here to make an encrypted token\r\n                res.json({\r\n                        sucess: true,\r\n                        message: 'password and username match!',\r\n                        token: 'encrypted token goes here'\r\n                })\r\n        } else {\r\n                res.json({\r\n                        sucess: false,\r\n                        message: 'password and username do not match'\r\n                })\r\n        }\r\n})\r\n\r\n// Using PUG template\r\napp.get('/', (req, res) => {\r\n        res.render('index', {title: \"Home Page\", content: \"This is a content in Home Page!\"})\r\n})\r\n\r\n/**\r\n * ----- Server ------\r\n * You can reset the server automatically when you make changes using a tool called nodemon\r\n */\r\napp.listen(8000, () => console.log(\"server is running\")) // start server in port 8000"]}